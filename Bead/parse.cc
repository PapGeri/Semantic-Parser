// Generated by Bisonc++ V5.02.00 on Fri, 01 Nov 2019 10:14:12 +0100

// $insert class.ih
#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION__ = 10
    };

// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {293, 1}, // 1: start ->  program
     {294, 4}, // 2: program ->  program_nev deklaraciok torzs program_vege
     {295, 2}, // 3: program_nev (PROGRAM) ->  PROGRAM AZONOSITO
     {296, 0}, // 4: deklaraciok ->  <empty>
     {296, 3}, // 5: deklaraciok (VALTOZOK) ->  VALTOZOK deklaracio deklaraciok
     {296, 2}, // 6: deklaraciok ->  deklaracio deklaraciok
     {299, 2}, // 7: deklaracio (AZONOSITO) ->  tipus AZONOSITO
     {300, 1}, // 8: tipus (EGESZ) ->  EGESZ
     {300, 1}, // 9: tipus (LOGIKAI) ->  LOGIKAI
     {297, 2}, // 10: torzs (UTASITASOK) ->  UTASITASOK utasitasok
     {301, 1}, // 11: utasitasok ->  utasitas
     {301, 2}, // 12: utasitasok ->  utasitas utasitasok
     {302, 1}, // 13: utasitas ->  be
     {302, 1}, // 14: utasitas ->  ki
     {302, 1}, // 15: utasitas ->  skip
     {302, 1}, // 16: utasitas ->  ertekadas
     {302, 1}, // 17: utasitas ->  ciklus
     {302, 1}, // 18: utasitas ->  ha
     {303, 2}, // 19: be (BE) ->  BE AZONOSITO
     {304, 2}, // 20: ki (KI) ->  KI kifejezes
     {305, 1}, // 21: skip (SKIP) ->  SKIP
     {306, 3}, // 22: ertekadas (AZONOSITO) ->  AZONOSITO ERTEKADAS kifejezes
     {307, 5}, // 23: ciklus (CIKLUS) ->  CIKLUS AMIG kifejezes utasitasok CIKLUS_VEGE
     {308, 5}, // 24: ha (HA) ->  HA kifejezes AKKOR utasitasok HA_VEGE
     {308, 7}, // 25: ha (HA) ->  HA kifejezes AKKOR utasitasok KULONBEN utasitasok HA_VEGE
     {309, 1}, // 26: kifejezes (IGAZ) ->  IGAZ
     {309, 1}, // 27: kifejezes (HAMIS) ->  HAMIS
     {309, 1}, // 28: kifejezes (AZONOSITO) ->  AZONOSITO
     {309, 3}, // 29: kifejezes (VAGY) ->  kifejezes VAGY kifejezes
     {309, 3}, // 30: kifejezes (ES) ->  kifejezes ES kifejezes
     {309, 3}, // 31: kifejezes (EGYENLO) ->  kifejezes EGYENLO kifejezes
     {309, 3}, // 32: kifejezes (KISEBB_EGYENLO) ->  kifejezes KISEBB_EGYENLO kifejezes
     {309, 3}, // 33: kifejezes (NAGYOBB_EGYENLO) ->  kifejezes NAGYOBB_EGYENLO kifejezes
     {309, 3}, // 34: kifejezes (KISEBB) ->  kifejezes KISEBB kifejezes
     {309, 3}, // 35: kifejezes (NAGYOBB) ->  kifejezes NAGYOBB kifejezes
     {309, 3}, // 36: kifejezes (NYITO_ZAROJEL) ->  NYITO_ZAROJEL kifejezes CSUKO_ZAROJEL
     {309, 2}, // 37: kifejezes (NEM) ->  NEM kifejezes
     {309, 1}, // 38: kifejezes (SZAM) ->  SZAM
     {309, 3}, // 39: kifejezes (PLUSZ) ->  kifejezes PLUSZ kifejezes
     {309, 3}, // 40: kifejezes (MINUSZ) ->  kifejezes MINUSZ kifejezes
     {309, 3}, // 41: kifejezes (SZORZAS) ->  kifejezes SZORZAS kifejezes
     {309, 3}, // 42: kifejezes (OSZTAS) ->  kifejezes OSZTAS kifejezes
     {309, 3}, // 43: kifejezes (MOD) ->  kifejezes MOD kifejezes
     {298, 1}, // 44: program_vege (PROGRAM_VEGE) ->  PROGRAM_VEGE
     {310, 1}, // 45: start_$ ->  start
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 5} },               
    { {       293}, { 1} }, // start      
    { {       294}, { 2} }, // program    
    { {       295}, { 3} }, // program_nev
    { {       257}, { 4} }, // PROGRAM    
    { {         0}, { 0} },               
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_3[] =
{
    { { REQ_DEF}, {  7} },               
    { {     296}, {  5} }, // deklaraciok
    { {     259}, {  6} }, // VALTOZOK   
    { {     299}, {  7} }, // deklaracio 
    { {     300}, {  8} }, // tipus      
    { {     275}, {  9} }, // EGESZ      
    { {     276}, { 10} }, // LOGIKAI    
    { {       0}, { -4} },               
};

SR__ s_4[] =
{
    { { REQ_TOKEN}, {  2} },             
    { {       258}, { 11} }, // AZONOSITO
    { {         0}, {  0} },             
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       297}, { 12} }, // torzs     
    { {       260}, { 13} }, // UTASITASOK
    { {         0}, {  0} },              
};

SR__ s_6[] =
{
    { { REQ_TOKEN}, {  5} },              
    { {       299}, { 14} }, // deklaracio
    { {       300}, {  8} }, // tipus     
    { {       275}, {  9} }, // EGESZ     
    { {       276}, { 10} }, // LOGIKAI   
    { {         0}, {  0} },              
};

SR__ s_7[] =
{
    { { REQ_DEF}, {  7} },               
    { {     296}, { 15} }, // deklaraciok
    { {     259}, {  6} }, // VALTOZOK   
    { {     299}, {  7} }, // deklaracio 
    { {     300}, {  8} }, // tipus      
    { {     275}, {  9} }, // EGESZ      
    { {     276}, { 10} }, // LOGIKAI    
    { {       0}, { -4} },               
};

SR__ s_8[] =
{
    { { REQ_TOKEN}, {  2} },             
    { {       258}, { 16} }, // AZONOSITO
    { {         0}, {  0} },             
};

SR__ s_9[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_10[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_11[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_12[] =
{
    { { REQ_TOKEN}, {  3} },                
    { {       298}, { 17} }, // program_vege
    { {       262}, { 18} }, // PROGRAM_VEGE
    { {         0}, {  0} },                
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, { 15} },              
    { {       301}, { 19} }, // utasitasok
    { {       302}, { 20} }, // utasitas  
    { {       303}, { 21} }, // be        
    { {       304}, { 22} }, // ki        
    { {       305}, { 23} }, // skip      
    { {       306}, { 24} }, // ertekadas 
    { {       307}, { 25} }, // ciklus    
    { {       308}, { 26} }, // ha        
    { {       273}, { 27} }, // BE        
    { {       274}, { 28} }, // KI        
    { {       270}, { 29} }, // SKIP      
    { {       258}, { 30} }, // AZONOSITO 
    { {       263}, { 31} }, // CIKLUS    
    { {       266}, { 32} }, // HA        
    { {         0}, {  0} },              
};

SR__ s_14[] =
{
    { { REQ_DEF}, {  7} },               
    { {     296}, { 33} }, // deklaraciok
    { {     259}, {  6} }, // VALTOZOK   
    { {     299}, {  7} }, // deklaracio 
    { {     300}, {  8} }, // tipus      
    { {     275}, {  9} }, // EGESZ      
    { {     276}, { 10} }, // LOGIKAI    
    { {       0}, { -4} },               
};

SR__ s_15[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_16[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_17[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_18[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_19[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_20[] =
{
    { { REQ_DEF}, {  15} },              
    { {     301}, {  34} }, // utasitasok
    { {     302}, {  20} }, // utasitas  
    { {     303}, {  21} }, // be        
    { {     304}, {  22} }, // ki        
    { {     305}, {  23} }, // skip      
    { {     306}, {  24} }, // ertekadas 
    { {     307}, {  25} }, // ciklus    
    { {     308}, {  26} }, // ha        
    { {     273}, {  27} }, // BE        
    { {     274}, {  28} }, // KI        
    { {     270}, {  29} }, // SKIP      
    { {     258}, {  30} }, // AZONOSITO 
    { {     263}, {  31} }, // CIKLUS    
    { {     266}, {  32} }, // HA        
    { {       0}, { -11} },              
};

SR__ s_21[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_22[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_23[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_25[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_26[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, {  2} },             
    { {       258}, { 35} }, // AZONOSITO
    { {         0}, {  0} },             
};

SR__ s_28[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 36} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_29[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_30[] =
{
    { { REQ_TOKEN}, {  2} },             
    { {       291}, { 43} }, // ERTEKADAS
    { {         0}, {  0} },             
};

SR__ s_31[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       264}, { 44} }, // AMIG
    { {         0}, {  0} },        
};

SR__ s_32[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 45} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_33[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_36[] =
{
    { { REQ_DEF}, {  13} },                   
    { {     279}, {  46} }, // VAGY           
    { {     280}, {  47} }, // ES             
    { {     281}, {  48} }, // EGYENLO        
    { {     284}, {  49} }, // KISEBB_EGYENLO 
    { {     285}, {  50} }, // NAGYOBB_EGYENLO
    { {     282}, {  51} }, // KISEBB         
    { {     283}, {  52} }, // NAGYOBB        
    { {     286}, {  53} }, // PLUSZ          
    { {     287}, {  54} }, // MINUSZ         
    { {     288}, {  55} }, // SZORZAS        
    { {     289}, {  56} }, // OSZTAS         
    { {     290}, {  57} }, // MOD            
    { {       0}, { -20} },                   
};

SR__ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_38[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_40[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 58} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_41[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 59} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_42[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_43[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 60} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_44[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 61} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_45[] =
{
    { { REQ_TOKEN}, { 14} },                   
    { {       267}, { 62} }, // AKKOR          
    { {       279}, { 46} }, // VAGY           
    { {       280}, { 47} }, // ES             
    { {       281}, { 48} }, // EGYENLO        
    { {       284}, { 49} }, // KISEBB_EGYENLO 
    { {       285}, { 50} }, // NAGYOBB_EGYENLO
    { {       282}, { 51} }, // KISEBB         
    { {       283}, { 52} }, // NAGYOBB        
    { {       286}, { 53} }, // PLUSZ          
    { {       287}, { 54} }, // MINUSZ         
    { {       288}, { 55} }, // SZORZAS        
    { {       289}, { 56} }, // OSZTAS         
    { {       290}, { 57} }, // MOD            
    { {         0}, {  0} },                   
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 63} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_47[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 64} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_48[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 65} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_49[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 66} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 67} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_51[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 68} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 69} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_53[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 70} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 71} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 72} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_56[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 73} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_57[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       309}, { 74} }, // kifejezes    
    { {       277}, { 37} }, // IGAZ         
    { {       278}, { 38} }, // HAMIS        
    { {       258}, { 39} }, // AZONOSITO    
    { {       271}, { 40} }, // NYITO_ZAROJEL
    { {       292}, { 41} }, // NEM          
    { {       261}, { 42} }, // SZAM         
    { {         0}, {  0} },                 
};

SR__ s_58[] =
{
    { { REQ_TOKEN}, { 14} },                   
    { {       272}, { 75} }, // CSUKO_ZAROJEL  
    { {       279}, { 46} }, // VAGY           
    { {       280}, { 47} }, // ES             
    { {       281}, { 48} }, // EGYENLO        
    { {       284}, { 49} }, // KISEBB_EGYENLO 
    { {       285}, { 50} }, // NAGYOBB_EGYENLO
    { {       282}, { 51} }, // KISEBB         
    { {       283}, { 52} }, // NAGYOBB        
    { {       286}, { 53} }, // PLUSZ          
    { {       287}, { 54} }, // MINUSZ         
    { {       288}, { 55} }, // SZORZAS        
    { {       289}, { 56} }, // OSZTAS         
    { {       290}, { 57} }, // MOD            
    { {         0}, {  0} },                   
};

SR__ s_59[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_60[] =
{
    { { REQ_DEF}, {  13} },                   
    { {     279}, {  46} }, // VAGY           
    { {     280}, {  47} }, // ES             
    { {     281}, {  48} }, // EGYENLO        
    { {     284}, {  49} }, // KISEBB_EGYENLO 
    { {     285}, {  50} }, // NAGYOBB_EGYENLO
    { {     282}, {  51} }, // KISEBB         
    { {     283}, {  52} }, // NAGYOBB        
    { {     286}, {  53} }, // PLUSZ          
    { {     287}, {  54} }, // MINUSZ         
    { {     288}, {  55} }, // SZORZAS        
    { {     289}, {  56} }, // OSZTAS         
    { {     290}, {  57} }, // MOD            
    { {       0}, { -22} },                   
};

SR__ s_61[] =
{
    { { REQ_TOKEN}, { 27} },                   
    { {       301}, { 76} }, // utasitasok     
    { {       279}, { 46} }, // VAGY           
    { {       280}, { 47} }, // ES             
    { {       281}, { 48} }, // EGYENLO        
    { {       284}, { 49} }, // KISEBB_EGYENLO 
    { {       285}, { 50} }, // NAGYOBB_EGYENLO
    { {       282}, { 51} }, // KISEBB         
    { {       283}, { 52} }, // NAGYOBB        
    { {       286}, { 53} }, // PLUSZ          
    { {       287}, { 54} }, // MINUSZ         
    { {       288}, { 55} }, // SZORZAS        
    { {       289}, { 56} }, // OSZTAS         
    { {       290}, { 57} }, // MOD            
    { {       302}, { 20} }, // utasitas       
    { {       303}, { 21} }, // be             
    { {       304}, { 22} }, // ki             
    { {       305}, { 23} }, // skip           
    { {       306}, { 24} }, // ertekadas      
    { {       307}, { 25} }, // ciklus         
    { {       308}, { 26} }, // ha             
    { {       273}, { 27} }, // BE             
    { {       274}, { 28} }, // KI             
    { {       270}, { 29} }, // SKIP           
    { {       258}, { 30} }, // AZONOSITO      
    { {       263}, { 31} }, // CIKLUS         
    { {       266}, { 32} }, // HA             
    { {         0}, {  0} },                   
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, { 15} },              
    { {       301}, { 77} }, // utasitasok
    { {       302}, { 20} }, // utasitas  
    { {       303}, { 21} }, // be        
    { {       304}, { 22} }, // ki        
    { {       305}, { 23} }, // skip      
    { {       306}, { 24} }, // ertekadas 
    { {       307}, { 25} }, // ciklus    
    { {       308}, { 26} }, // ha        
    { {       273}, { 27} }, // BE        
    { {       274}, { 28} }, // KI        
    { {       270}, { 29} }, // SKIP      
    { {       258}, { 30} }, // AZONOSITO 
    { {       263}, { 31} }, // CIKLUS    
    { {       266}, { 32} }, // HA        
    { {         0}, {  0} },              
};

SR__ s_63[] =
{
    { { REQ_DEF}, {  12} },                   
    { {     280}, {  47} }, // ES             
    { {     281}, {  48} }, // EGYENLO        
    { {     284}, {  49} }, // KISEBB_EGYENLO 
    { {     285}, {  50} }, // NAGYOBB_EGYENLO
    { {     282}, {  51} }, // KISEBB         
    { {     283}, {  52} }, // NAGYOBB        
    { {     286}, {  53} }, // PLUSZ          
    { {     287}, {  54} }, // MINUSZ         
    { {     288}, {  55} }, // SZORZAS        
    { {     289}, {  56} }, // OSZTAS         
    { {     290}, {  57} }, // MOD            
    { {       0}, { -29} },                   
};

SR__ s_64[] =
{
    { { REQ_DEF}, {  11} },                   
    { {     281}, {  48} }, // EGYENLO        
    { {     284}, {  49} }, // KISEBB_EGYENLO 
    { {     285}, {  50} }, // NAGYOBB_EGYENLO
    { {     282}, {  51} }, // KISEBB         
    { {     283}, {  52} }, // NAGYOBB        
    { {     286}, {  53} }, // PLUSZ          
    { {     287}, {  54} }, // MINUSZ         
    { {     288}, {  55} }, // SZORZAS        
    { {     289}, {  56} }, // OSZTAS         
    { {     290}, {  57} }, // MOD            
    { {       0}, { -30} },                   
};

SR__ s_65[] =
{
    { { REQ_DEF}, {  10} },                   
    { {     284}, {  49} }, // KISEBB_EGYENLO 
    { {     285}, {  50} }, // NAGYOBB_EGYENLO
    { {     282}, {  51} }, // KISEBB         
    { {     283}, {  52} }, // NAGYOBB        
    { {     286}, {  53} }, // PLUSZ          
    { {     287}, {  54} }, // MINUSZ         
    { {     288}, {  55} }, // SZORZAS        
    { {     289}, {  56} }, // OSZTAS         
    { {     290}, {  57} }, // MOD            
    { {       0}, { -31} },                   
};

SR__ s_66[] =
{
    { { REQ_DEF}, {   6} },           
    { {     286}, {  53} }, // PLUSZ  
    { {     287}, {  54} }, // MINUSZ 
    { {     288}, {  55} }, // SZORZAS
    { {     289}, {  56} }, // OSZTAS 
    { {     290}, {  57} }, // MOD    
    { {       0}, { -32} },           
};

SR__ s_67[] =
{
    { { REQ_DEF}, {   6} },           
    { {     286}, {  53} }, // PLUSZ  
    { {     287}, {  54} }, // MINUSZ 
    { {     288}, {  55} }, // SZORZAS
    { {     289}, {  56} }, // OSZTAS 
    { {     290}, {  57} }, // MOD    
    { {       0}, { -33} },           
};

SR__ s_68[] =
{
    { { REQ_DEF}, {   6} },           
    { {     286}, {  53} }, // PLUSZ  
    { {     287}, {  54} }, // MINUSZ 
    { {     288}, {  55} }, // SZORZAS
    { {     289}, {  56} }, // OSZTAS 
    { {     290}, {  57} }, // MOD    
    { {       0}, { -34} },           
};

SR__ s_69[] =
{
    { { REQ_DEF}, {   6} },           
    { {     286}, {  53} }, // PLUSZ  
    { {     287}, {  54} }, // MINUSZ 
    { {     288}, {  55} }, // SZORZAS
    { {     289}, {  56} }, // OSZTAS 
    { {     290}, {  57} }, // MOD    
    { {       0}, { -35} },           
};

SR__ s_70[] =
{
    { { REQ_DEF}, {   4} },           
    { {     288}, {  55} }, // SZORZAS
    { {     289}, {  56} }, // OSZTAS 
    { {     290}, {  57} }, // MOD    
    { {       0}, { -39} },           
};

SR__ s_71[] =
{
    { { REQ_DEF}, {   4} },           
    { {     288}, {  55} }, // SZORZAS
    { {     289}, {  56} }, // OSZTAS 
    { {     290}, {  57} }, // MOD    
    { {       0}, { -40} },           
};

SR__ s_72[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_73[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_74[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_75[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_76[] =
{
    { { REQ_TOKEN}, {  2} },               
    { {       265}, { 78} }, // CIKLUS_VEGE
    { {         0}, {  0} },               
};

SR__ s_77[] =
{
    { { REQ_TOKEN}, {  3} },            
    { {       269}, { 79} }, // HA_VEGE 
    { {       268}, { 80} }, // KULONBEN
    { {         0}, {  0} },            
};

SR__ s_78[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_79[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, { 15} },              
    { {       301}, { 81} }, // utasitasok
    { {       302}, { 20} }, // utasitas  
    { {       303}, { 21} }, // be        
    { {       304}, { 22} }, // ki        
    { {       305}, { 23} }, // skip      
    { {       306}, { 24} }, // ertekadas 
    { {       307}, { 25} }, // ciklus    
    { {       308}, { 26} }, // ha        
    { {       273}, { 27} }, // BE        
    { {       274}, { 28} }, // KI        
    { {       270}, { 29} }, // SKIP      
    { {       258}, { 30} }, // AZONOSITO 
    { {       263}, { 31} }, // CIKLUS    
    { {       266}, { 32} }, // HA        
    { {         0}, {  0} },              
};

SR__ s_81[] =
{
    { { REQ_TOKEN}, {  2} },           
    { {       269}, { 82} }, // HA_VEGE
    { {         0}, {  0} },           
};

SR__ s_82[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,
};

} // anonymous namespace ends




// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void ParserBase::setDebug(bool mode)
{
    d_actionCases__ = false;
    d_debug__ = mode;
}

void ParserBase::setDebug(DebugMode__ mode)
{
    d_actionCases__ = mode & ACTIONCASES;
    d_debug__ =       mode & ON;
}

void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    size_t currentSize = d_stateStack__.size();
    if (static_cast<size_t>(d_stackIdx__ + 1) == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION__;
        d_stateStack__.resize(newSize);
        // $insert LTYPEresize
        d_locationStack__.resize(newSize);
        if (d_valueStack__.capacity() >= newSize)
            d_valueStack__.resize(newSize);
        else
        {
            std::vector<STYPE__> enlarged(newSize);
            for (size_t idx = 0; idx != currentSize; ++idx)
                enlarged[idx] = std::move(d_valueStack__[idx]);
            d_valueStack__.swap(enlarged);
        }
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    // $insert LTYPEpush
    *(d_lsp__ = &d_locationStack__[d_stackIdx__]) = d_loc__;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = std::move(d_val__);
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = std::move(d_nextVal__);
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = std::move(d_val__);
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
    // $insert LTYPEpop
    d_lsp__ = &d_locationStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 43 "plang.y"
        {
         std::cout << "start -> program" << std::endl;
         }
        break;

        case 2:
#line 49 "plang.y"
        {
         std::cout << "program -> program_nev deklaraciok torzs program_vege" << std::endl;
         }
        break;

        case 3:
#line 55 "plang.y"
        {
         std::cout << "program_nev -> PROGRAM AZONOSITO" << std::endl;
         }
        break;

        case 4:
#line 60 "plang.y"
        {
         std::cout << "deklaracio -> epszilon" << std::endl;
         }
        break;

        case 5:
#line 64 "plang.y"
        {
         std::cout << "deklaracio -> VALTOZOK deklaracio deklaraciok" << std::endl;
         }
        break;

        case 6:
#line 68 "plang.y"
        {
         std::cout << "deklaraciok -> deklaracio deklaraciok" << std::endl;
         }
        break;

        case 7:
#line 74 "plang.y"
        {
         std::cout << "deklaracio -> tipus AZONOSITO" << std::endl;
         }
        break;

        case 8:
#line 80 "plang.y"
        {
         std::cout << "tipus -> EGESZ" << std::endl;
         }
        break;

        case 9:
#line 84 "plang.y"
        {
         std::cout << "tipus -> LOGIKAI" << std::endl;
         }
        break;

        case 10:
#line 90 "plang.y"
        {
         std::cout << "torzs -> UTASITASOK utasitasok" << std::endl;
         }
        break;

        case 11:
#line 96 "plang.y"
        {
         std::cout << "utasitasok -> utasitas" << std::endl;
         }
        break;

        case 12:
#line 100 "plang.y"
        {
         std::cout << "utasitasok -> utasitas utasitasok" << std::endl;
         }
        break;

        case 13:
#line 106 "plang.y"
        {
         std::cout << "utasitasok -> be" << std::endl;
         }
        break;

        case 14:
#line 110 "plang.y"
        {
         std::cout << "utasitasok -> ki" << std::endl;
         }
        break;

        case 15:
#line 114 "plang.y"
        {
         std::cout << "utasitasok -> skip" << std::endl;
         }
        break;

        case 16:
#line 118 "plang.y"
        {
         std::cout << "utasitasok -> ertekadas" << std::endl;
         }
        break;

        case 17:
#line 122 "plang.y"
        {
         std::cout << "utasitasok -> ciklus" << std::endl;
         }
        break;

        case 18:
#line 126 "plang.y"
        {
         std::cout << "utasitasok -> ha" << std::endl;
         }
        break;

        case 19:
#line 132 "plang.y"
        {
         std::cout << "be -> BE AZONOSITO" << std::endl;
         }
        break;

        case 20:
#line 138 "plang.y"
        {
         std::cout << "ki -> KI kifejezes" << std::endl;
         }
        break;

        case 21:
#line 144 "plang.y"
        {
         std::cout << "skip -> SKIP" << std::endl;
         }
        break;

        case 22:
#line 150 "plang.y"
        {
         std::cout << "ertekadas -> AZONOSITO ERTEKADAS kifejezes" << std::endl;
         }
        break;

        case 23:
#line 156 "plang.y"
        {
         std::cout << "ciklus -> CIKLUS AMIG kifejezes utasitasok CIKLUS_VEGE" << std::endl;
         }
        break;

        case 24:
#line 162 "plang.y"
        {
         std::cout << "ha -> HA kifejezes AKKOR utasitasok HA_VEGE" << std::endl;
         }
        break;

        case 25:
#line 166 "plang.y"
        {
         std::cout << "ha -> HA kifejezes AKKOR utasitasok KULONBEN utasitasok HA_VEGE" << std::endl;
         }
        break;

        case 26:
#line 172 "plang.y"
        {
         std::cout << "kifejezes -> IGAZ" << std::endl;
         }
        break;

        case 27:
#line 176 "plang.y"
        {
         std::cout << "kifejezes -> HAMIS" << std::endl;
         }
        break;

        case 28:
#line 180 "plang.y"
        {
         std::cout << "kifejezes -> AZONOSITO" << std::endl;
         }
        break;

        case 29:
#line 184 "plang.y"
        {
         std::cout << "kifejezes -> kifejezes VAGY kifejezes" << std::endl;
         }
        break;

        case 30:
#line 188 "plang.y"
        {
         std::cout << "kifejezes -> kifejezes ES kifejezes" << std::endl;
         }
        break;

        case 31:
#line 192 "plang.y"
        {
         std::cout << "kifejezes -> kifejezes EGYENLO kifejezes" << std::endl;
         }
        break;

        case 32:
#line 196 "plang.y"
        {
         std::cout << "kifejezes -> kifejezes KISEBB_EGYENLO kifejezes" << std::endl;
         }
        break;

        case 33:
#line 200 "plang.y"
        {
         std::cout << "kifejezes -> kifejezes NAGYOBB_EGYENLO kifejezes" << std::endl;
         }
        break;

        case 34:
#line 204 "plang.y"
        {
         std::cout << "kifejezes -> kifejezes KISEBB kifejezes" << std::endl;
         }
        break;

        case 35:
#line 208 "plang.y"
        {
         std::cout << "kifejezes -> kifejezes NAGYOBB kifejezes" << std::endl;
         }
        break;

        case 36:
#line 212 "plang.y"
        {
         std::cout << "kifejezes -> NYITO_ZAROJEL kifejezes CSUKO_ZAROJEL" << std::endl;
         }
        break;

        case 37:
#line 216 "plang.y"
        {
         std::cout << "kifejezes -> NEM kifejezes" << std::endl;
         }
        break;

        case 38:
#line 220 "plang.y"
        {
         std::cout << "kifejezes -> SZAM" << std::endl;
         }
        break;

        case 39:
#line 224 "plang.y"
        {
         std::cout << "kifejezes -> kifejezes PLUSZ kifejezes" << std::endl;
         }
        break;

        case 40:
#line 228 "plang.y"
        {
         std::cout << "kifejezes -> kifejezes MINUSZ kifejezes" << std::endl;
         }
        break;

        case 41:
#line 232 "plang.y"
        {
         std::cout << "kifejezes -> kifejezes SZORZAS kifejezes" << std::endl;
         }
        break;

        case 42:
#line 236 "plang.y"
        {
         std::cout << "kifejezes -> kifejezes OSZTAS kifejezes" << std::endl;
         }
        break;

        case 43:
#line 240 "plang.y"
        {
         std::cout << "kifejezes -> kifejezes MOD kifejezes" << std::endl;
         }
        break;

        case 44:
#line 246 "plang.y"
        {
         std::cout << "program_vege -> PROGRAM_VEGE" << std::endl;
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
// $insert threading
    SR__ *sr = s_state[d_state__];          // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;            // sentinel-index in the SR__ array
    
    SR__ *lastElementPtr = sr + lastIdx;
    lastElementPtr->d_token = d_token__;    // set search-token
    
    SR__ *elementPtr = sr + 1;              // start the search at s_xx[1]
    while (elementPtr->d_token != d_token__)
        ++elementPtr;
    

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}



